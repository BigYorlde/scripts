### КАВЫЧКИ
'Одинарные' кавычки указывают, что никакой подстановки не требуется.
"Двойные" кавычки указывают, что подстановка необходима/допускается.
Никогда не помещайте целые числа в кавычки (value=32)
Помещайте подстановку комманд в кавычки, даже если вы ожидаете числа (number="$(generate_number)")
Используйте кавычки для слов, но не обязательно (readonly USE_INTEGER='true')
Используйте кавычки для специальных мета-символов shell (echo 'Hello stranger, and well met. Earn lots of $$$') (echo "Process $$: Done making \$\$\$.")
Опции комманд и имена путей (Здесь предполагается, что $1 содержит значение) (grep -li Hugo /dev/null "$1")

### Мета-переменные (хз как их назвать ???)
$# Хранит количество аргументов командной строки, которые
были переданы программе оболочки.
$? Хранит значение выхода последней
выполненной команды.
В $0 хранится первое слово введенной команды (
название командной оболочки).
$* Хранит все аргументы, которые были введены в
командной строке как 1 строку ($1 $2 ...). "$*" расскрывается в один аргумент, соединяя остальные аргументы
"$@" Хранит все аргументы, которые были введены
в командной строке, индивидуально цитируемый, т.е. как отдельные строки каждое значение ("$1" "$2" ...).
"$@" будет передавать аргументы как есть, так что никакие из переданных аргументов не будут потеряны
$$ — это идентификатор процесса (PID) самого скрипта.
${!#} Получение последнего из переданных скрипту параметров, не требующий знания их количества.
Для передачи аргументов "$@" правильно почти всегда, и "$*" неправильно почти всегда
$* и $@ будут разделены пробелами

### Различные ключи (обычно, хорошо для конструкций типа if [ ... ])
-d file Проверяет, существует ли файл, и является ли он директорией.
-e file Проверяет, существует ли файл.
-f file Проверяет, существует ли файл, и является ли он файлом.
-r file Проверяет, существует ли файл, и доступен ли он для чтения.
-s file Проверяет, существует ли файл, и не является ли он пустым.
-w file Проверяет, существует ли файл, и доступен ли он для записи.
-x file Проверяет, существует ли файл, и является ли он исполняемым.
file1 -nt file2 Проверяет, новее ли file1, чем file2.
file1 -ot file2 Проверяет, старше ли file1, чем file2.
-O file Проверяет, существует ли файл, и является ли его владельцем текущий пользователь.
-G file Проверяет, существует ли файл, и соответствует ли его идентификатор группы идентификатору группы текущего пользователя.
str1 = str2 Проверяет строки на равенство, возвращает истину, если строки идентичны.
str1 != str2 Возвращает истину, если строки не идентичны.
str1 < str2 Возвращает истину, если str1меньше, чем str2.
str1 > str2 Возвращает истину, если str1больше, чем str2.
-n str1 Возвращает истину, если длина str1больше нуля.
-z str1 Возвращает истину, если длина str1равна нулю
n1 -eq n2 Возвращает истинное значение, если n1 равно n2.
n1 -ge n2 Возвращает истинное значение, если n1 больше или равно n2.
n1 -gt n2 Возвращает истинное значение, если n1 больше n2.
n1 -le n2 Возвращает истинное значение, если n1 меньше или равно n2.
n1 -lt n2 Возвращает истинное значение, если n1 меньше n2.
n1 -ne n2 Возвращает истинное значение, если n1 не равно n2

### Прочее
IFS=$’\n’ Задаем символ-разделитель передаваемых параметров





















